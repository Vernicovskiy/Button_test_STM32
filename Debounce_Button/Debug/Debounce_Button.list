
Debounce_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b8  080004c0  000104c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b8  080004b8  000104c0  2**0
                  CONTENTS
  4 .ARM          00000000  080004b8  080004b8  000104c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b8  080004c0  000104c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b8  080004b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004bc  080004bc  000104bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004c0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000104f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000fe9  00000000  00000000  00010533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000317  00000000  00000000  0001151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00011838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000070  00000000  00000000  000118e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dc45  00000000  00000000  00011950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000beb  00000000  00000000  0001f595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fbee  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000198  00000000  00000000  0006fd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0006ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004a0 	.word	0x080004a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004a0 	.word	0x080004a0

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <SystemInit+0x20>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <SystemInit+0x20>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	2b00      	cmp	r3, #0
 8000208:	db0b      	blt.n	8000222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	f003 021f 	and.w	r2, r3, #31
 8000210:	4907      	ldr	r1, [pc, #28]	; (8000230 <__NVIC_EnableIRQ+0x38>)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	095b      	lsrs	r3, r3, #5
 8000218:	2001      	movs	r0, #1
 800021a:	fa00 f202 	lsl.w	r2, r0, r2
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000e100 	.word	0xe000e100

08000234 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	2b00      	cmp	r3, #0
 8000244:	db12      	blt.n	800026c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	f003 021f 	and.w	r2, r3, #31
 800024c:	490a      	ldr	r1, [pc, #40]	; (8000278 <__NVIC_DisableIRQ+0x44>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	095b      	lsrs	r3, r3, #5
 8000254:	2001      	movs	r0, #1
 8000256:	fa00 f202 	lsl.w	r2, r0, r2
 800025a:	3320      	adds	r3, #32
 800025c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000260:	f3bf 8f4f 	dsb	sy
}
 8000264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000266:	f3bf 8f6f 	isb	sy
}
 800026a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100

0800027c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	2b00      	cmp	r3, #0
 800028c:	db0c      	blt.n	80002a8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 021f 	and.w	r2, r3, #31
 8000294:	4907      	ldr	r1, [pc, #28]	; (80002b4 <__NVIC_ClearPendingIRQ+0x38>)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	095b      	lsrs	r3, r3, #5
 800029c:	2001      	movs	r0, #1
 800029e:	fa00 f202 	lsl.w	r2, r0, r2
 80002a2:	3360      	adds	r3, #96	; 0x60
 80002a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000e100 	.word	0xe000e100

080002b8 <tim10_init>:
uint8_t counter = 0;
__IO uint32_t Tim10_Count = 0;
volatile uint8_t timer_overflowed = 1;
volatile uint8_t button_pressed = 0;

	void tim10_init(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
		RCC->APB2ENR |= RCC_APB2ENR_TIM10EN; // тактирование
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <tim10_init+0x28>)
 80002be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c0:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <tim10_init+0x28>)
 80002c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c6:	6453      	str	r3, [r2, #68]	; 0x44
		NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); // глоб прер
 80002c8:	2019      	movs	r0, #25
 80002ca:	f7ff ff95 	bl	80001f8 <__NVIC_EnableIRQ>
		TIM10->PSC = 16000;// преддел
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <tim10_init+0x2c>)
 80002d0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80002d4:	629a      	str	r2, [r3, #40]	; 0x28
		TIM10->ARR	= 10;
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <tim10_init+0x2c>)
 80002d8:	220a      	movs	r2, #10
 80002da:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40014400 	.word	0x40014400

080002e8 <exti_init>:

	void exti_init(){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; // тактирование на порт
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <exti_init+0x64>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a16      	ldr	r2, [pc, #88]	; (800034c <exti_init+0x64>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <exti_init+0x64>)
 80002fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002fc:	4a13      	ldr	r2, [pc, #76]	; (800034c <exti_init+0x64>)
 80002fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000302:	6453      	str	r3, [r2, #68]	; 0x44
		GPIOC->MODER &= ~GPIO_MODER_MODER13;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <exti_init+0x68>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a11      	ldr	r2, [pc, #68]	; (8000350 <exti_init+0x68>)
 800030a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800030e:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR |= GPIO_PUPDR_PUPD13_0;
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <exti_init+0x68>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <exti_init+0x68>)
 8000316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800031a:	60d3      	str	r3, [r2, #12]
		SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC ;
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <exti_init+0x6c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a0c      	ldr	r2, [pc, #48]	; (8000354 <exti_init+0x6c>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6153      	str	r3, [r2, #20]
		EXTI->IMR |= EXTI_IMR_MR13;
 8000328:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <exti_init+0x70>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <exti_init+0x70>)
 800032e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000332:	6013      	str	r3, [r2, #0]
		EXTI->RTSR |= EXTI_RTSR_TR13;
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <exti_init+0x70>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a07      	ldr	r2, [pc, #28]	; (8000358 <exti_init+0x70>)
 800033a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033e:	6093      	str	r3, [r2, #8]
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000340:	2028      	movs	r0, #40	; 0x28
 8000342:	f7ff ff59 	bl	80001f8 <__NVIC_EnableIRQ>
	}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40023800 	.word	0x40023800
 8000350:	40020800 	.word	0x40020800
 8000354:	40013800 	.word	0x40013800
 8000358:	40013c00 	.word	0x40013c00

0800035c <TIM1_UP_TIM10_IRQHandler>:


	void TIM1_UP_TIM10_IRQHandler(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

			asm("NOP");
 8000360:	bf00      	nop
			if(READ_BIT(TIM10->SR, TIM_SR_UIF)){
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8000364:	691b      	ldr	r3, [r3, #16]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d017      	beq.n	800039e <TIM1_UP_TIM10_IRQHandler+0x42>
				CLEAR_BIT(TIM10->CR1, TIM_CR1_CEN); // остановили таймер
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8000374:	f023 0301 	bic.w	r3, r3, #1
 8000378:	6013      	str	r3, [r2, #0]
				EXTI->PR |= EXTI_PR_PR13;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 8000380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000384:	6153      	str	r3, [r2, #20]
				NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000386:	2028      	movs	r0, #40	; 0x28
 8000388:	f7ff ff78 	bl	800027c <__NVIC_ClearPendingIRQ>
				NVIC_EnableIRQ(EXTI15_10_IRQn);
 800038c:	2028      	movs	r0, #40	; 0x28
 800038e:	f7ff ff33 	bl	80001f8 <__NVIC_EnableIRQ>
				TIM10->SR &= ~TIM_SR_UIF;
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8000394:	691b      	ldr	r3, [r3, #16]
 8000396:	4a03      	ldr	r2, [pc, #12]	; (80003a4 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8000398:	f023 0301 	bic.w	r3, r3, #1
 800039c:	6113      	str	r3, [r2, #16]
			}
	}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40014400 	.word	0x40014400
 80003a8:	40013c00 	.word	0x40013c00

080003ac <EXTI15_10_IRQHandler>:

	void EXTI15_10_IRQHandler(void){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
			NVIC_DisableIRQ(EXTI15_10_IRQn);
 80003b0:	2028      	movs	r0, #40	; 0x28
 80003b2:	f7ff ff3f 	bl	8000234 <__NVIC_DisableIRQ>
			counter++;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <EXTI15_10_IRQHandler+0x2c>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <EXTI15_10_IRQHandler+0x2c>)
 80003c0:	701a      	strb	r2, [r3, #0]
			TIM_EnableCounter(TIM10);
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <EXTI15_10_IRQHandler+0x30>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a05      	ldr	r2, [pc, #20]	; (80003dc <EXTI15_10_IRQHandler+0x30>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6013      	str	r3, [r2, #0]
			DWT->CYCCNT = 0;
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <EXTI15_10_IRQHandler+0x34>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
		 }
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000001c 	.word	0x2000001c
 80003dc:	40014400 	.word	0x40014400
 80003e0:	e0001000 	.word	0xe0001000

080003e4 <main>:


	int main(void){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

		exti_init();
 80003e8:	f7ff ff7e 	bl	80002e8 <exti_init>
		tim10_init();
 80003ec:	f7ff ff64 	bl	80002b8 <tim10_init>
		TIM_EnableIT_UPDATE(TIM10);
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <main+0x1c>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4a02      	ldr	r2, [pc, #8]	; (8000400 <main+0x1c>)
 80003f6:	f043 0301 	orr.w	r3, r3, #1
 80003fa:	60d3      	str	r3, [r2, #12]

		while(1){
 80003fc:	e7fe      	b.n	80003fc <main+0x18>
 80003fe:	bf00      	nop
 8000400:	40014400 	.word	0x40014400

08000404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000406:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000408:	f7ff fee4 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800040c:	480c      	ldr	r0, [pc, #48]	; (8000440 <LoopForever+0x6>)
  ldr r1, =_edata
 800040e:	490d      	ldr	r1, [pc, #52]	; (8000444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000410:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <LoopForever+0xe>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000424:	4c0a      	ldr	r4, [pc, #40]	; (8000450 <LoopForever+0x16>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000432:	f000 f811 	bl	8000458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000436:	f7ff ffd5 	bl	80003e4 <main>

0800043a <LoopForever>:

LoopForever:
  b LoopForever
 800043a:	e7fe      	b.n	800043a <LoopForever>
  ldr   r0, =_estack
 800043c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000444:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000448:	080004c0 	.word	0x080004c0
  ldr r2, =_sbss
 800044c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000450:	20000020 	.word	0x20000020

08000454 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC_IRQHandler>
	...

08000458 <__libc_init_array>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	4d0d      	ldr	r5, [pc, #52]	; (8000490 <__libc_init_array+0x38>)
 800045c:	4c0d      	ldr	r4, [pc, #52]	; (8000494 <__libc_init_array+0x3c>)
 800045e:	1b64      	subs	r4, r4, r5
 8000460:	10a4      	asrs	r4, r4, #2
 8000462:	2600      	movs	r6, #0
 8000464:	42a6      	cmp	r6, r4
 8000466:	d109      	bne.n	800047c <__libc_init_array+0x24>
 8000468:	4d0b      	ldr	r5, [pc, #44]	; (8000498 <__libc_init_array+0x40>)
 800046a:	4c0c      	ldr	r4, [pc, #48]	; (800049c <__libc_init_array+0x44>)
 800046c:	f000 f818 	bl	80004a0 <_init>
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	10a4      	asrs	r4, r4, #2
 8000474:	2600      	movs	r6, #0
 8000476:	42a6      	cmp	r6, r4
 8000478:	d105      	bne.n	8000486 <__libc_init_array+0x2e>
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000480:	4798      	blx	r3
 8000482:	3601      	adds	r6, #1
 8000484:	e7ee      	b.n	8000464 <__libc_init_array+0xc>
 8000486:	f855 3b04 	ldr.w	r3, [r5], #4
 800048a:	4798      	blx	r3
 800048c:	3601      	adds	r6, #1
 800048e:	e7f2      	b.n	8000476 <__libc_init_array+0x1e>
 8000490:	080004b8 	.word	0x080004b8
 8000494:	080004b8 	.word	0x080004b8
 8000498:	080004b8 	.word	0x080004b8
 800049c:	080004bc 	.word	0x080004bc

080004a0 <_init>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr

080004ac <_fini>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr
