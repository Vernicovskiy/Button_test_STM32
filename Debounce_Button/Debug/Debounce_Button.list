
Debounce_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  4 .ARM          00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b4  080003b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003b8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003b8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dfd  00000000  00000000  0001042b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002e6  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00011510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00011598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dc45  00000000  00000000  000115f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b3a  00000000  00000000  0001f235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fb26  00000000  00000000  0001fd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000114  00000000  00000000  0006f898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0006f9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000398 	.word	0x08000398

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000398 	.word	0x08000398

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <SystemInit+0x20>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <SystemInit+0x20>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	2b00      	cmp	r3, #0
 8000208:	db0b      	blt.n	8000222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	f003 021f 	and.w	r2, r3, #31
 8000210:	4907      	ldr	r1, [pc, #28]	; (8000230 <__NVIC_EnableIRQ+0x38>)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	095b      	lsrs	r3, r3, #5
 8000218:	2001      	movs	r0, #1
 800021a:	fa00 f202 	lsl.w	r2, r0, r2
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000e100 	.word	0xe000e100

08000234 <exti_init>:
	    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; //RCC on for GPIO C
	    GPIOC->PUPDR |= GPIO_PUPDR_PUPD13_0; // pull_up

	} */

	void exti_init(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; // тактирование на порт
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <exti_init+0x64>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a16      	ldr	r2, [pc, #88]	; (8000298 <exti_init+0x64>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <exti_init+0x64>)
 8000246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000248:	4a13      	ldr	r2, [pc, #76]	; (8000298 <exti_init+0x64>)
 800024a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800024e:	6453      	str	r3, [r2, #68]	; 0x44
		GPIOC->MODER &= ~GPIO_MODER_MODER13;
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <exti_init+0x68>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a11      	ldr	r2, [pc, #68]	; (800029c <exti_init+0x68>)
 8000256:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800025a:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR |= GPIO_PUPDR_PUPD13_0;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <exti_init+0x68>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a0e      	ldr	r2, [pc, #56]	; (800029c <exti_init+0x68>)
 8000262:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000266:	60d3      	str	r3, [r2, #12]
		SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC ;
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <exti_init+0x6c>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <exti_init+0x6c>)
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6153      	str	r3, [r2, #20]
		EXTI->IMR |= EXTI_IMR_MR13;
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <exti_init+0x70>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <exti_init+0x70>)
 800027a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800027e:	6013      	str	r3, [r2, #0]
		EXTI->FTSR |= EXTI_FTSR_TR13;
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <exti_init+0x70>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <exti_init+0x70>)
 8000286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028a:	60d3      	str	r3, [r2, #12]
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800028c:	2028      	movs	r0, #40	; 0x28
 800028e:	f7ff ffb3 	bl	80001f8 <__NVIC_EnableIRQ>
	}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40023800 	.word	0x40023800
 800029c:	40020800 	.word	0x40020800
 80002a0:	40013800 	.word	0x40013800
 80002a4:	40013c00 	.word	0x40013c00

080002a8 <EXTI15_10_IRQHandler>:


	void EXTI15_10_IRQHandler(void){
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
		counter++;
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <EXTI15_10_IRQHandler+0x28>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <EXTI15_10_IRQHandler+0x28>)
 80002b6:	701a      	strb	r2, [r3, #0]
		EXTI->PR |= EXTI_PR_PR13;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <EXTI15_10_IRQHandler+0x2c>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <EXTI15_10_IRQHandler+0x2c>)
 80002be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c2:	6153      	str	r3, [r2, #20]

	}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	40013c00 	.word	0x40013c00

080002d8 <main>:


	int main(void){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0

		//gpio_init();
		exti_init();
 80002dc:	f7ff ffaa 	bl	8000234 <exti_init>
		DWT->CTRL |= 1;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <main+0x20>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <main+0x20>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6013      	str	r3, [r2, #0]



		while(1){
			asm("NOP");
 80002ec:	bf00      	nop
			DWT->CYCCNT = 0;
 80002ee:	4b02      	ldr	r3, [pc, #8]	; (80002f8 <main+0x20>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	605a      	str	r2, [r3, #4]
			asm("NOP");
 80002f4:	e7fa      	b.n	80002ec <main+0x14>
 80002f6:	bf00      	nop
 80002f8:	e0001000 	.word	0xe0001000

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f7ff ff68 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffd3 	bl	80002d8 <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	20000020 	.word	0x20000020

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	; (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	; (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	; (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	; (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
